plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = "${project.mod_version}-${getMcMinor(project.minecraft_version)}"
group = project.maven_group



repositories{
	maven { url 'https://jitpack.io' }
	maven { url "https://maven.shedaniel.me/" }
	maven {
		url "https://maven.terraformersmc.com/releases/"
		content {
			includeGroup "com.terraformersmc"
		}
	}
	mavenCentral()
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	//General config library
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	//Mod menu
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

	//General compression library
	modImplementation "org.apache.commons:commons-compress:1.21"
	include "org.apache.commons:commons-compress:1.21"

	//LZMA support
	modImplementation 'org.tukaani:xz:1.9'
	include "org.tukaani:xz:1.9"

	//Gzip compression, parallel, GITHUB
	modImplementation "com.github.shevek:parallelgzip:${project.pgzip_commit_hash}"
	include "com.github.shevek:parallelgzip:${project.pgzip_commit_hash}"

	// Zstd compression
	modImplementation "com.github.luben:zstd-jni:1.5.2-3"
	include "com.github.luben:zstd-jni:1.5.2-3"

	// Lazy DFU makes the dev env start up much faster by loading DataFixerUpper lazily, which would otherwise take a long time. We rarely need it anyway.
	// I couldn't get this working in my environment - IzzyBizzy
	//modRuntime("com.github.astei:lazydfu:${project.lazydfu_version}") {
	//	exclude(module: "fabric-loader")
	//}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}
java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

	from("Copyright_Notice")
}
// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven

		maven {
			name = 'myRepo'
			url = layout.buildDirectory.dir("repo")
		}
	}
}

static def getMcMinor(ver) {
	String[] arr = ((String)ver).split("\\.")

	if(arr.length < 2) return ver

	return (String)(arr[0] + "." + arr[1])
}
